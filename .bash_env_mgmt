# .bashrc extension
# vim: set filetype=sh:

###
# This and other external scripts may be loaded multiple
# times, and each may load any of the others depending on
# the value(s) they may need.  This construct is to dodge
# potential recursive inclusions.  The reSource() function
# allows me to reload when I explicitly request it without
# having to unset the variable.
#
# Think of it like the old C...
# #ifndef __THIS_LIBRARY_LOADED__
# #define __THIS_LIBRARY_LOADED__
# (...header here...)
# #endif
# ...trick, but for the shell.  :)
#
if [[    ${loaded_bash_env_mgmt:-NOT_LOADED}  != "LOADED" \
      || ${reload_bash_env_mgmt:-DO_NOT_LOAD}  = "RELOAD" ]]
then
    export loaded_bash_env_mgmt="LOADED"
    export reload_bash_env_mgmt="DO_NOT_LOAD"

    ###
    # Standard directories I always use.
    export BIN_DIR=0
    export DEVEL_DIR=1
    export ENV_DIR=2
    export PERSONAL_DIR=3
    export TMP_DIR=4
    export WORK_DIR=5

    ###
    # Useful utility - joins an array using a provided character.
    #
    # Lifted straight out of
    # http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array
    #
    # Example:
    #   joinList , a b c
    # Output:
    #   a,b,c
    #
    function joinList() {
        local IFS="$1"
        shift
        echo "$@"
    }
    export -f joinList

    ###
    # Deduplicate a colon-delimited list (such as $PATH).  Preserves
    # first-seen order, so foo:bar:foo:quux:bar:foo:splat will become
    # simply foo:bar:quux:splat.
    function uniqPath() {
        echo $1 | perl -pe '
                chomp;
                map { $path{$_} = ++$pos unless $path{$_} } split /:/;
                $_ = join(":", map { $_ } sort { $path{$a} <=> $path{$b} } keys %path)
        '
    }
    export -f uniqPath

    ###
    # I tried using an array (so the _DIR vars were simple indices), but you
    # can't export an array variable in bash (see bash(1), under "Bugs").  The
    # practical consequence of that is that child shells (under X, for
    # instance) wouldn't inherit the array, so a number of functions wouldn't
    # work.  I'm not using a collection of simple variables because i want to
    # be able to work off of a list of "my standard directories" from time to
    # time.  Ie - I really want an array of standard dirs; since I can't have
    # that, this function serves the same purposes.
    function myPath() {
        local thePaths=(
            "bin"
            "devel"
            "env"
            "personal"
            "tmp"
            "workstuff"
        )

        if [[ -n $1 ]]
        then
            case $1 in
                all)
                    eval echo "${HOME}/{$(joinList , ${thePaths[*]})}"
                    ;;
                names)
                    echo ${thePaths[*]}
                    ;;
                ''|*[!0-9]*)
                    ;;
                *)
                    if [[ $1 -lt ${#thePaths[*]} ]]
                    then
                        echo "${HOME}/${thePaths[$1]}"
                    fi
                    ;;
            esac
        fi
    }
    export -f myPath


    ###
    # basename(1) should be everywhere, but I've run into
    # environments where surprising things are absent.
    function myBasename () {
        bn=""
        if [[ -n $1 ]]
        then
            foundBasename=$(which basename)
            if [[ -n $foundBasename && -x $foundBasename ]]
            then
                bn=$($foundBasename $1)
            else
                bn=$(echo $1 | sed -e 's/.*\/\([^\/][^\/]*)$/\1/')
            fi
        fi
        echo $bn
    }
    export -f myBasename

    ###
    # As mentioned above, 
    function reSource () {
        local FileToLoad
        local ReloadVarName
        if [[ -n $1 ]]
        then
            FileToLoad=$1
            if [[ -f $FileToLoad ]]
            then
                ReloadVarName=$(myBasename $FileToLoad)
                ReloadVarName=$(echo $ReloadVarName | sed -e 's/^\.*/reload_/')
                eval ${ReloadVarName}=RELOAD
                . $FileToLoad
            else
                echo "No such file: $FileToLoad"
            fi
        else
            echo "Usage: reSource <filename>"
        fi
    }
    export -f reSource

    ###
    # Make sure the basic directory structure is in place.
    function bootstrapStandardDirs () {
        local status
        # Begin with ~/env - the source of all truth
        if [[ -d $(myPath $ENV_DIR) ]]
        then
            cd $(myPath $ENV_DIR)
            if [[ $? -eq 0 ]]
            then
                # ...now create dummy versions of all the
                # other standard dirs under it.
                for dir in $(myPath names)
                do
                    if [[ ! -d $dir ]]
                    then
                        mkdir $dir
                        if [[ $? -eq 1 ]]
                        then
                            status=1
                        fi
                    fi
                done
                # Also .ssh
                if [[ ! -d .ssh ]]
                then
                    mkdir .ssh
                fi
                # Make symlinks to the config and authorized keys
                # so they'll come along for the ride when syncing.
                if [[ $? -eq 0 ]]
                then
                    if [[ -f ${HOME}/.ssh/config ]]
                    then
                        ln -s ${HOME}/.ssh/config .ssh/config 2> /dev/null
                    fi
                    if [[ -f ${HOME}/.ssh/authorized_keys ]]
                    then
                        ln -s ${HOME}/.ssh/authorized_keys .ssh/authorized_keys 2> /dev/null
                    fi
                else
                    status=1
                fi
            else
                status=1
            fi
            cd - &> /dev/null
        else
            status=1
        fi

        return $status
    }
    export -f bootstrapStandardDirs

    ###
    # Rsync command used by syncenv(), if rsync is available.
    function rsyncit () {
        rsync -Lazvv --exclude-from=./rsync-exclude.these ./ $1
    }
    export -f rsyncit

    ###
    # Tar command used by syncenv(), if rsync is NOT available.
    function tarit () {
        UntarCommand="tar xvf - -C"
        if [[ $1 =~ : ]]
        then
            Host=$(echo $1 | sed -e 's/\(^[^:][^:]*\).*/\1/')
            Path=$(echo $1 | sed -e 's/^[^:][^:]*:\(.*\)/\1/')
            Receiver="ssh $Host '$UntarCommand $Path'"
        else
            Receiver="$UntarCommand $1"
        fi

        # tar's exclude syntax differs slightly from rsync's, hence
        # the separate exclusion files.
        tar cvf - -h --exclude-from=./tar-exclude.these ./ | $Receiver
    }
    export -f tarit

    ###
    # syncenv() syncs my "dot files" and other assorted shell creature comforts
    # to a specified host.  
    #
    # Note that some of the hosts may require a proxy to reach.  That should
    # be taken care of in ~/.ssh/config
    # 
    # Removing the following files, for now...
    #                             $ENV{"HOME"} . "/.gdbinit",
    #                             $ENV{"HOME"} . "/bin/vmssh",
    function syncenv () {
        if [[ -z $1 ]]
        then
            echo "Usage: syncenv [local] [list of hosts]"
        else
            bootstrapStandardDirs
            if [[ $? -eq 1 ]]
            then
                echo "FATAL: Unable to validate/create basic directory structure."
                echo "FATAL: No sync performed."
            else
                cd $(myPath $ENV_DIR)

                ###
                # Strongly prefer rsync.
                which rsync &> /dev/null
                if [[ $? -eq 0 ]]
                then
                    SyncCommand="rsyncit"
                else
                    SyncCommand="tarit"
                fi

                local TargetPath
                for TargetHost in "$@"
                do
                    if [[ $TargetHost = "local" ]]
                    then
                        TargetPath="${HOME}/"
                    else
                        TargetPath="${TargetHost}:~/"
                    fi

                    ###
                    # No need to specify a source; we always sync
                    # from './' (the env dir) to the target.
                    echo "$TargetHost : "
                    $SyncCommand $TargetPath
                done
                cd - &> /dev/null
            fi
        fi
    }
    export -f syncenv

fi
