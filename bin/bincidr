#!/usr/bin/env perl
###
#
# Shows an IP and mask in dotted-quad and binary.
#
# Example:
# $ bincidr 1.2.3.4/24
# 1.2.3.4/24
# ==========
#   Dotted Quad:
#               1.       2.       3.       4
#      &      255.     255.     255.       0
#      =        1.       2.       3.       0
#   Binary:
#        00000001 00000010 00000011 00000100
#      & 11111111 11111111 11111111 00000000
#      = 00000001 00000010 00000011 00000000
#
###
use strict;
use warnings;

use constant  TRUE => 1;
use constant FALSE => 0;

use Socket;
use English qw{ -no_match_vars };

if (scalar(@ARGV)) {
    CIDR:
    while (my $cidr = shift) {
        if (ValidBlock($cidr)) {
            my ($net, $mask) = (split /\//, $cidr);

            my $netNumber   = inet_aton($net);
            my $maskNumber  = pack "B32", ("1" x $mask . "0" x (32 - $mask));
            my $finalNumber = $netNumber & $maskNumber;

            print "$cidr :\n", "=" x length($cidr), "\n";
            print "    Dotted Quad:\n";
            print " " x 8,            PrettyQuad($net), "\n";
            print " " x 6, "\&", " ", PrettyQuad(inet_ntoa($maskNumber)), "\n";
            print " " x 6,  "=", " ", PrettyQuad(inet_ntoa($finalNumber)), "\n";

            print "    Binary:\n";
            print " " x 8,            PrettyBin($netNumber), "\n";
            print " " x 6, "\&", " ", PrettyBin($maskNumber), "\n";
            print " " x 6,  "=", " ", PrettyBin($finalNumber), "\n";
        }
        else {
            warn "WARNING: Invalid CIDR block: $cidr\n";
            warn "WARNING: Must be in a.b.c.d/m form.\n";
        }
    }
    continue {
        print "\n";
    }
}
else {
    print "Usage: $PROGRAM_NAME <cidr> [cidr ...]\n";
}

sub ValidBlock {
    my $netblock = shift;
    my $valid    = FALSE;

    if (   $netblock
        && $netblock =~ m|\A(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})\Z|
       ) {
        #     0-255        0-255        0-255        0-255        0-32
        if (($1<=255) && ($2<=255) && ($3<=255) && ($4<=255) && ($5<=32)) {
            $valid = TRUE;
        }
    }

    return $valid;
}

sub PrettyQuad {
    my $dottedQuad = shift;
    return join(".", map { sprintf "%8d", $_ } split(/\./, $dottedQuad));
}

sub PrettyBin {
    my $netNumber = shift;
    return join(" ", unpack("(B8)*", $netNumber));
}
